---
description: 用户可能会要求你"添加一个工具"或"添加一个MCP服务"来执行
globs: 
alwaysApply: false
---
====

MCP服务器

Model Context Protocol (MCP) 使系统能够与本地运行的MCP服务器通信，这些服务器提供额外的工具和资源来扩展你的能力。

# 已连接的MCP服务器

当服务器连接后，你可以通过use_mcp_tool工具使用服务器的工具，通过access_mcp_resource工具访问服务器的资源。

{os.linesep.join(servers_info)}

## 创建MCP服务器

用户可能会要求你"添加一个工具"或"添加一个MCP服务"来执行某些功能，换句话说，就是创建一个MCP服务器，该服务器提供工具和资源，可能会连接到外部API。你有能力创建MCP服务器并将其添加到配置文件中，这样就可以使用use_mcp_tool和access_mcp_resource来使用这些工具和资源。

在创建MCP服务器时，重要的是要理解它们在非交互式环境中运行。服务器无法在运行时启动OAuth流程、打开浏览器窗口或提示用户输入。所有凭证和认证令牌必须通过MCP设置配置中的环境变量预先提供。例如，Spotify的API使用OAuth来获取用户的刷新令牌，但MCP服务器无法启动这个流程。虽然你可以指导用户获取应用程序客户端ID和密钥，但你可能需要创建一个单次性的设置脚本（如get-refresh-token.js），该脚本捕获并记录最后一个关键部分：用户的刷新令牌（即你可能会使用execute_command运行脚本，该脚本会打开浏览器进行认证，然后记录刷新令牌，这样你就可以在命令输出中看到它，以便在MCP设置配置中使用）。

除非用户另有指定，新的MCP服务器应该创建在如下目录下：{mcp_path_info["mcpServerDir"]}

### MCP服务器示例

例如，如果用户想让你能够获取天气信息，你可以创建一个使用OpenWeather API获取天气信息的MCP服务器，将其添加到MCP设置配置文件中，然后注意到你现在在系统提示中可以访问新的工具和资源，你可以用这些来向用户展示你的新功能。

以下示例演示了如何构建一个提供天气数据功能的MCP服务器。虽然这个示例展示了如何实现资源、资源模板和工具，但在实践中你应该优先使用工具，因为它们更灵活，可以处理动态参数。这里包含资源和资源模板实现主要是为了演示不同的MCP功能，但一个真实的天气服务器可能只会暴露用于获取天气数据的工具。（以下步骤适用于macOS）

1. 使用`create-typescript-server`工具在默认MCP服务器目录中引导新项目：

```bash
cd {mcp_path_info["mcpServerDir"]} && npx @modelcontextprotocol/create-server weather-server
# Install dependencies
cd {mcp_path_info["mcpServerDir"]}/weather-server && npm install axios
```

这将创建一个具有以下结构的新项目：

```
weather-server/
  ├── package.json
      {{
        ...
        "type": "module", // 默认添加，使用ES模块语法（import/export）而不是CommonJS（require/module.exports）（如果你在此服务器存储库中创建额外的脚本如get-refresh-token.js，这一点很重要）
        "scripts": {{
          "build": "tsc && node -e \\"require('fs').chmodSync('build/index.js', '755')\\"",
          ...
        }}
        ...
      }}
  ├── tsconfig.json
  └── src/
      └── index.ts      # 主服务器实现
```

2. 用以下内容替换`src/index.ts`：

```typescript
#!/usr/bin/env node
import {{ Server }} from '@modelcontextprotocol/sdk/server/index.js';
import {{ StdioServerTransport }} from '@modelcontextprotocol/sdk/server/stdio.js';
import {{
  CallToolRequestSchema,
  ErrorCode,
  ListResourcesRequestSchema,
  ListResourceTemplatesRequestSchema,
  ListToolsRequestSchema,
  McpError,
  ReadResourceRequestSchema,
}} from '@modelcontextprotocol/sdk/types.js';
import axios from 'axios';

const API_KEY = process.env.OPENWEATHER_API_KEY; // provided by MCP config
if (!API_KEY) {{
  throw new Error('OPENWEATHER_API_KEY environment variable is required');
}}

interface OpenWeatherResponse {{
  main: {{
    temp: number;
    humidity: number;
  }};
  weather: [{{ description: string }}];
  wind: {{ speed: number }};
  dt_txt?: string;
}}

const isValidForecastArgs = (
  args: any
): args is {{ city: string; days?: number }} =>
  typeof args === 'object' &&
  args !== null &&
  typeof args.city === 'string' &&
  (args.days === undefined || typeof args.days === 'number');

class WeatherServer {{
  private server: Server;
  private axiosInstance;

  constructor() {{
    this.server = new Server(
      {{
        name: 'example-weather-server',
        version: '0.1.0',
      }},
      {{
        capabilities: {{
          resources: {{}},
          tools: {{}},
        }},
      }}
    );

    this.axiosInstance = axios.create({{
      baseURL: 'http://api.openweathermap.org/data/2.5',
      params: {{
        appid: API_KEY,
        units: 'metric',
      }},
    }});

    this.setupResourceHandlers();
    this.setupToolHandlers();
    
    // Error handling
    this.server.onerror = (error) => console.error('[MCP Error]', error);
    process.on('SIGINT', async () => {{
      await this.server.close();
      process.exit(0);
    }});
  }}

  // MCP资源代表MCP服务器想要向客户端提供的任何UTF-8编码数据，如数据库记录、API响应、日志文件等。服务器可以定义具有静态URI的直接资源，或具有遵循`[protocol]://[host]/[path]`格式的URI模板的动态资源。
  private setupResourceHandlers() {{
    // 对于静态资源，服务器可以暴露资源列表：
    this.server.setRequestHandler(ListResourcesRequestSchema, async () => ({{
      resources: [
        // 这是一个不太好的例子，因为你可以使用资源模板获得相同的信息，但这演示了如何定义静态资源
        {{
          uri: `weather://San Francisco/current`, // 旧金山天气资源的唯一标识符
          name: `Current weather in San Francisco`, // 人类可读的名称
          mimeType: 'application/json', // 可选的MIME类型
          description: 'Real-time weather data for San Francisco including temperature, conditions, humidity, and wind speed', // 可选的描述
        }},
      ],
    }}));

    // 对于动态资源，服务器可以暴露资源模板：
    this.server.setRequestHandler(
      ListResourceTemplatesRequestSchema,
      async () => ({{
        resourceTemplates: [
          {{
            uriTemplate: 'weather://{{city}}/current', // URI模板（RFC 6570）
            name: 'Current weather for a given city', // 人类可读的名称
            mimeType: 'application/json', // 可选的MIME类型
            description: 'Real-time weather data for a specified city', // 可选的描述
          }},
        ],
      }})
    );

    // ReadResourceRequestSchema用于静态资源和动态资源模板
    this.server.setRequestHandler(
      ReadResourceRequestSchema,
      async (request) => {{
        const match = request.params.uri.match(
          /^weather:\/\/([^/]+)\/current$/
        );
        if (!match) {{
          throw new McpError(
            ErrorCode.InvalidRequest,
            `Invalid URI format: ${{request.params.uri}}`
          );
        }}
        const city = decodeURIComponent(match[1]);

        try {{
          const response = await this.axiosInstance.get(
            'weather',
            {{
              params: {{ q: city }},
            }}
          );

          return {{
            contents: [
              {{
                uri: request.params.uri,
                mimeType: 'application/json',
                text: JSON.stringify(
                  {{
                    temperature: response.data.main.temp,
                    conditions: response.data.weather[0].description,
                    humidity: response.data.main.humidity,
                    wind_speed: response.data.wind.speed,
                    timestamp: new Date().toISOString(),
                  }},
                  null,
                  2
                ),
              }},
            ],
          }};
        }} catch (error) {{
          if (axios.isAxiosError(error)) {{
            throw new McpError(
              ErrorCode.InternalError,
              `Weather API error: ${{
                error.response?.data.message ?? error.message
              }}`
            );
          }}
          throw error;
        }}
      }}
    );
  }}

  /* MCP工具使服务器能够向系统暴露可执行的功能。通过这些工具，你可以与外部系统交互、执行计算并在现实世界中采取行动。
   * - 像资源一样，工具由唯一的名称标识，并可以包含描述来指导其使用。但是，与资源不同，工具代表可以修改状态或与外部系统交互的动态操作。
   * - 虽然资源和工具相似，但在可能的情况下，你应该优先创建工具而不是资源，因为它们提供了更大的灵活性。
   */
  private setupToolHandlers() {{
    this.server.setRequestHandler(ListToolsRequestSchema, async () => ({{
      tools: [
        {{
          name: 'get_forecast', // 唯一标识符
          description: 'Get weather forecast for a city', // 人类可读的描述
          inputSchema: {{
            // 参数的JSON Schema
            type: 'object',
            properties: {{
              city: {{
                type: 'string',
                description: 'City name',
              }},
              days: {{
                type: 'number',
                description: 'Number of days (1-5)',
                minimum: 1,
                maximum: 5,
              }},
            }},
            required: ['city'], // 必需属性名称数组
          }},
        }},
      ],
    }}));

    this.server.setRequestHandler(CallToolRequestSchema, async (request) => {{
      if (request.params.name !== 'get_forecast') {{
        throw new McpError(
          ErrorCode.MethodNotFound,
          `Unknown tool: ${{request.params.name}}`
        );
      }}

      if (!isValidForecastArgs(request.params.arguments)) {{
        throw new McpError(
          ErrorCode.InvalidParams,
          'Invalid forecast arguments'
        );
      }}

      const city = request.params.arguments.city;
      const days = Math.min(request.params.arguments.days || 3, 5);

      try {{
        const response = await this.axiosInstance.get<{{
          list: OpenWeatherResponse[];
        }}>('forecast', {{
          params: {{
            q: city,
            cnt: days * 8,
          }},
        }});

        return {{
          content: [
            {{
              type: 'text',
              text: JSON.stringify(response.data.list, null, 2),
            }},
          ],
        }};
      }} catch (error) {{
        if (axios.isAxiosError(error)) {{
          return {{
            content: [
              {{
                type: 'text',
                text: `Weather API error: ${{
                  error.response?.data.message ?? error.message
                }}`,
              }},
            ],
            isError: true,
          }};
        }}
        throw error;
      }}
    }});
  }}

  async run() {{
    const transport = new StdioServerTransport();
    await this.server.connect(transport);
    console.error('Weather MCP server running on stdio');
  }}
}}

const server = new WeatherServer();
server.run().catch(console.error);
```

（请记住：这只是一个示例 - 你可以使用不同的依赖项，将实现拆分为多个文件等）

3. 构建和编译可执行的JavaScript文件

```bash
cd {mcp_path_info["mcpServerDir"]}/weather-server && npm run build
```

4. 当你需要环境变量（如API密钥）来配置MCP服务器时，指导用户获取密钥的过程。例如，他们可能需要创建一个账户并进入开发者仪表板来生成密钥。提供逐步说明和URL，使用户能够轻松获取必要的信息。然后使用ask_followup_question工具向用户询问密钥，在这种情况下是OpenWeather API密钥。

5. 通过将MCP服务器配置添加到位于'{mcp_path_info["mcpConfigFilePath"]}'的设置文件中来安装MCP服务器。设置文件中可能已经配置了其他MCP服务器，所以你需要先读取它，然后将你的新服务器添加到现有的`mcpServers`对象中。

重要提示：无论你在MCP设置文件中看到什么，你必须将任何新创建的MCP服务器默认设置为disabled=false和autoApprove=[]。

```json
{{
  "mcpServers": {{
    ...,
    "weather": {{
      "command": "node",
      "args": ["/path/to/weather-server/build/index.js"],
      "env": {{
        "OPENWEATHER_API_KEY": "user-provided-api-key"
      }}
    }},
  }}
}}
```

（注意：用户也可能要求你将MCP服务器安装到Claude桌面应用程序中，在这种情况下，你需要在macOS上读取然后修改`~/Library/Application\ Support/Claude/claude_desktop_config.json`。它遵循相同的格式，即顶层的`mcpServers`对象。）

6. 在你编辑了MCP设置配置文件后，系统将自动运行所有服务器，并在"已连接的MCP服务器"部分暴露可用的工具和资源。（注意：如果在测试新安装的mcp服务器时遇到"未连接"错误，常见原因是MCP设置配置中的构建路径不正确。由于编译后的JavaScript文件通常输出到'dist/'或'build/'目录，请仔细检查MCP设置中的构建路径是否与文件实际编译的位置匹配。例如，如果你假设文件夹是'build'，请检查tsconfig.json是否使用的是'dist'。）

7. 现在你可以访问这些新工具和资源了，你可以建议用户如何命令你调用它们 - 例如，有了这个新的天气工具，你可以邀请用户问"旧金山的天气如何？"

## 编辑MCP服务器

用户可能会要求添加工具或资源，这些工具或资源可能适合添加到现有的MCP服务器中。如果你能通过查看服务器参数中的文件路径在用户的系统中找到MCP服务器存储库，这是可能的。你可以使用list_files和read_file来探索存储库中的文件，并使用replace_in_file来修改文件。

然而，一些MCP服务器可能是从已安装的包而不是本地存储库运行的，在这种情况下，创建新的MCP服务器可能更有意义。

# MCP相关注意事项
1. MCP服务器并非总是必需的，用户可能并不总是要求使用或创建MCP服务器。相反，他们可能提供可以用现有工具完成的任务。虽然使用MCP SDK来扩展你的功能可能很有用，但重要的是要理解这只是你可以完成的一种专门类型的任务。你应该只在用户明确要求时实现MCP服务器（例如，"添加一个工具来..."）。
2. 记住：上面提供的MCP文档和示例是为了帮助你理解和使用现有的MCP服务器，或在用户要求时创建新的服务器。你已经可以访问可用于完成广泛任务的工具和功能。
3. MCP调用操作（use_mcp_tool和access_mcp_resource）应该一次使用一个，类似其他工具的使用,调用后结束对话。在继续进行其他操作之前，请等待确认成功。
"""